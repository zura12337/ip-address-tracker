{"version":3,"sources":["images/icon-arrow.svg","components/header.jsx","components/results.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","handleSubmit","e","preventDefault","props","onSubmit","className","this","type","placeholder","id","value","ipAddress","onChange","src","require","alt","Component","Results","state","data","location","ip","city","country","timezone","isp","myIcon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","App","lat","lng","zoom","handleChange","setState","target","a","axios","get","console","log","response","toast","error","messages","position","getMapData","Map","center","TileLayer","attribution","url","Marker","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,wC,2IC6B5BC,E,4MA1BbC,aAAe,SAACC,GACdA,EAAEC,iBAEF,EAAKC,MAAMC,SAASH,I,uDAGpB,OACE,yBAAKI,UAAU,UACb,wBAAIA,UAAU,eAAd,sBACA,0BAAMD,SAAUE,KAAKN,cACnB,2BACEO,KAAK,OACLC,YAAY,sCACZC,GAAG,WACHC,MAAOJ,KAAKH,MAAMQ,UAClBC,SAAUN,KAAKH,MAAMS,WAEvB,4BAAQL,KAAK,SAASE,GAAG,aACvB,yBAAKI,IAAKC,EAAQ,IAA6BC,IAAI,a,GAnB1CC,aCkCNC,E,4MAjCbC,MAAQ,G,uDACE,IACAC,EAASb,KAAKH,MAAdgB,KACR,OAEEA,EAAKC,SACH,yBAAKf,UAAU,WACb,2BAAOA,UAAU,iBACf,+BACE,wBAAIA,UAAU,SAAd,cACA,wBAAIA,UAAU,SAAd,YACA,wBAAIA,UAAU,SAAd,YACA,wBAAIA,UAAU,SAAd,QAEF,+BACE,4BACE,wBAAIA,UAAU,SAASc,EAAKE,IAC5B,wBAAIhB,UAAU,SACXc,EAAKC,SAASE,KADjB,KACyBH,EAAKC,SAASG,SAEvC,wBAAIlB,UAAU,SAAd,OAA2Bc,EAAKC,SAASI,UACzC,wBAAInB,UAAU,SAASc,EAAKM,SAMpC,6C,GA5BcT,a,iECMlBU,EAASC,IAAEC,KAAK,CAClBC,QACE,qGACFC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAuDLC,E,4MAnDbf,MAAQ,CAAEP,UAAW,GAAIQ,KAAM,GAAIe,IAAK,EAAGC,IAAK,EAAGC,KAAM,G,EAEzDC,aAAe,SAACpC,GACd,EAAKqC,SAAS,CAAE3B,UAAWV,EAAEsC,OAAO7B,S,EAEtCN,S,uCAAW,WAAOH,GAAP,iBAAAuC,EAAA,+EAEgBC,IAAMC,IAC3B,kFACEzC,EAAEsC,OAAO,GAAG7B,OAJT,gBAECS,EAFD,EAECA,KAIRwB,QAAQC,IAAIzB,GACZ,EAAKmB,SAAS,CACZJ,IAAKf,EAAKC,SAASc,IACnBC,IAAKhB,EAAKC,SAASe,IACnBC,KAAM,KAER,EAAKE,SAAS,CAAEnB,SAZT,kDAcPwB,QAAQC,IAAI,KAAGC,UACfC,IAAMC,MAAM,KAAGF,SAAS1B,KAAK6B,UAftB,0D,iHAmBT,MAAO,CAAC1C,KAAKY,MAAMgB,IAAK5B,KAAKY,MAAMiB,O,+BAG3B,IAAD,EAC2B7B,KAAKY,MAA/BP,EADD,EACCA,UAAWQ,EADZ,EACYA,KAAMiB,EADlB,EACkBA,KACjBC,EAA2B/B,KAA3B+B,aAAcjC,EAAaE,KAAbF,SAChB6C,EAAW3C,KAAK4C,aACtB,OACE,6BACE,kBAAC,EAAD,CACEvC,UAAWA,EACXC,SAAUyB,EACVjC,SAAUA,IAEZ,kBAAC,EAAD,CAASe,KAAMA,IACf,kBAACgC,EAAA,EAAD,CAAK9C,UAAU,MAAM+C,OAAQH,EAAUb,KAAMA,GAC3C,kBAACiB,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CAAQP,SAAUA,EAAUrB,KAAMF,U,GA7C1BV,aCJEyC,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACLJ,QAAQI,MAAMA,EAAM0B,c","file":"static/js/main.590ef903.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(e);\n  };\n  render() {\n    return (\n      <div className=\"header\">\n        <h1 className=\"text-center\">IP Address Tracker</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Search for any IP Address or Domain\"\n            id=\"ip-input\"\n            value={this.props.ipAddress}\n            onChange={this.props.onChange}\n          />\n          <button type=\"submit\" id=\"ip-submit\">\n            <img src={require(\"../images/icon-arrow.svg\")} alt=\">\" />\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Results extends Component {\n  state = {};\n  render() {\n    const { data } = this.props;\n    return (\n      data,\n      data.location ? (\n        <div className=\"results\">\n          <table className=\"results-table\">\n            <thead>\n              <th className=\"col-1\">IP address</th>\n              <th className=\"col-1\">Location</th>\n              <th className=\"col-1\">Timezone</th>\n              <th className=\"col-1\">ISP</th>\n            </thead>\n            <tbody>\n              <tr>\n                <td className=\"col-1\">{data.ip}</td>\n                <td className=\"col-1\">\n                  {data.location.city}, {data.location.country}\n                </td>\n                <td className=\"col-1\">UTC {data.location.timezone}</td>\n                <td className=\"col-1\">{data.isp}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <> </>\n      )\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport Results from \"./components/results\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nvar myIcon = L.icon({\n  iconUrl:\n    \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png\",\n  iconSize: [25, 41],\n  iconAnchor: [12.5, 41],\n  popupAnchor: [0, -41],\n});\n\nclass App extends Component {\n  state = { ipAddress: \"\", data: {}, lat: 0, lng: 0, zoom: 2 };\n\n  handleChange = (e) => {\n    this.setState({ ipAddress: e.target.value });\n  };\n  onSubmit = async (e) => {\n    try {\n      const { data } = await axios.get(\n        \"https://geo.ipify.org/api/v1?apiKey=at_mmHB8KrhJdOPXm1urLb0h1GpJgmnj&ipAddress=\" +\n          e.target[0].value\n      );\n      console.log(data);\n      this.setState({\n        lat: data.location.lat,\n        lng: data.location.lng,\n        zoom: 13,\n      });\n      this.setState({ data });\n    } catch (ex) {\n      console.log(ex.response);\n      toast.error(ex.response.data.messages);\n    }\n  };\n  getMapData() {\n    return [this.state.lat, this.state.lng];\n  }\n\n  render() {\n    const { ipAddress, data, zoom } = this.state;\n    const { handleChange, onSubmit } = this;\n    const position = this.getMapData();\n    return (\n      <div>\n        <Header\n          ipAddress={ipAddress}\n          onChange={handleChange}\n          onSubmit={onSubmit}\n        />\n        <Results data={data} />\n        <Map className=\"map\" center={position} zoom={zoom}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker position={position} icon={myIcon}></Marker>\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastContainer />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}